<script src="jquery-3.3.1.min.js"></script>

<!-- START SIGMA IMPORTS -->
<script src="sigmajs/src/sigma.core.js"></script>
<script src="sigmajs/src/conrad.js"></script>
<script src="sigmajs/src/utils/sigma.utils.js"></script>
<script src="sigmajs/src/utils/sigma.polyfills.js"></script>
<script src="sigmajs/src/sigma.settings.js"></script>
<script src="sigmajs/src/classes/sigma.classes.dispatcher.js"></script>
<script src="sigmajs/src/classes/sigma.classes.configurable.js"></script>
<script src="sigmajs/src/classes/sigma.classes.graph.js"></script>
<script src="sigmajs/src/classes/sigma.classes.camera.js"></script>
<script src="sigmajs/src/classes/sigma.classes.quad.js"></script>
<script src="sigmajs/src/classes/sigma.classes.edgequad.js"></script>
<script src="sigmajs/src/captors/sigma.captors.mouse.js"></script>
<script src="sigmajs/src/captors/sigma.captors.touch.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.canvas.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.webgl.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.svg.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.nodes.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.nodes.fast.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.fast.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.labels.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.hovers.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.nodes.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.curve.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.curvedArrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.curve.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.curvedArrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.extremities.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.utils.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.nodes.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.edges.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.edges.curve.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.labels.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.hovers.def.js"></script>
<script src="sigmajs/src/middlewares/sigma.middlewares.rescale.js"></script>
<script src="sigmajs/src/middlewares/sigma.middlewares.copy.js"></script>
<script src="sigmajs/src/misc/sigma.misc.animation.js"></script>
<script src="sigmajs/src/misc/sigma.misc.bindEvents.js"></script>
<script src="sigmajs/src/misc/sigma.misc.bindDOMEvents.js"></script>
<script src="sigmajs/src/misc/sigma.misc.drawHovers.js"></script>
<script src="sigmajs/plugins/sigma.parsers.json/sigma.parsers.json.js"></script>
<!-- END SIGMA IMPORTS -->

<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title>App</title>
</head>

<body>

  <div id="container">

      <div id="graph-container">
      </div>
      <div id="info-container">
        <div id="nodes-list">
          <select id="select-nodes-add">
            <option value="" disabled="disabled"></option>
            <% nodes.each do |n|%>
            <option value= <%= n['id'].to_s %> > <%= n['label'] %></option>
            <% end %>
          </select>
          <button id="add-node-button">Adicionar aos selecionados</button>
        </div>
        <div id="nodes-info">
          <textarea id="nodes-info-text"> Nodes Info </textarea>
        </div>
      </div>

    <div id="selected-nodes">
    </div>
    <div id="menu-subgraph">
      <button class="button-advance" onclick="buttonAdvance()"> Criar subgrafo com todos os nós</button><br>
      <button class="button-advance-selected" onclick="buttonAdvanceSelected()"> Criar subgrafo com nós selecionados</button>
    </div>

  </div>

</body>

<script>
/**
 * Here is just a basic example on how to properly display a graph
 * exported from Gephi as a JSON file, with the JSON Exporter plugin from
 * the Oxford Internet Institute:
 *
 *  > https://marketplace.gephi.org/plugin/json-exporter/
 *
 * The plugin sigma.parsers.json can load and parse the JSON graph file,
 * and instantiate sigma when the graph is received.
 *
 * The object given as the second parameter is the base of the instance
 * configuration object. The plugin will just add the "graph" key to it
 * before the instanciation.
 */
  var graphname = urlParam('graph');

  if (graphname == ""){
    var fullname = "uploads/default.json"
  }else{
    var fullname = "uploads/" + graphname;
  }

  buttonAdvance = function(){
    window.location = '/create_subgraph'
  }

  $( "#add-node-button" ).click(function(e) {
    e.preventDefault();
    var selected_id = $('#select-nodes-add').val();
    var selected_text = $('#select-nodes-add option:selected').text();
    $("#select-nodes-add option[value=" + selected_id + "]").attr('disabled', 'disabled');
    $( "#selected-nodes" ).append("<a class='selected-item' name='"+selected_id+"'>"+selected_text+"<div class='hover-delete' onclick='deleteSelected(this)'>Remover</div></a>" );
    $('#select-nodes-add').prop('selectedIndex',0);
    var s = sigma.instances()[0];
    s.graph.nodes()[selected_id].color = '#0f0';
    s.graph.edges().forEach(function(e){
      e.color = '#000';
    });
    s.refresh();
  });

  deleteSelected = function(element) {
    var removed_id = parseInt(element.parentElement.name);
    $("#select-nodes-add option[value=" + removed_id + "]").removeAttr('disabled');
    var s = sigma.instances()[0];
    s.graph.nodes()[removed_id].color = '#000';
    s.refresh();
    $(element).parent().remove();
  }

  dc_toggle_selected = function(id){
    var toggle_id = id;
    var s = sigma.instances()[0];
    //check if is selected
    if ($(".selected-item[name="+id+"]").length > 0){
      $("#select-nodes-add option[value=" + toggle_id + "]").removeAttr('disabled');
      s.graph.nodes()[toggle_id].color = '#000';
      s.refresh();
      $(".selected-item[name"+id+"]").remove();
    }
    else {
      $("#select-nodes-add option[value=" + toggle_id + "]").attr('disabled', 'disabled');
      var toggle_label = s.graph.nodes()[toggle_id].label;
      $( "#selected-nodes" ).append("<a class='selected-item' name='"+toggle_id+"'>"+toggle_label+"<div class='hover-delete' onclick='deleteSelected(this)'>Remover</div></a>" );
      $('#select-nodes-add').prop('selectedIndex',0);
      s.graph.nodes()[toggle_id].color = '#0f0'
      s.graph.edges().forEach(function(e){
        e.color = '#000';
      });
    s.refresh();
    }
  };

  buttonAdvanceSelected = function(){
    var ids = $(".selected-item").map(function() {
      return this.name;
    }).get();
    if (ids.length < 3) {
      alert('Número inválido de nós selecionados!')
    }
    else {
      ids_hash = {};
      ids_hash['ids'] = ids;
      window.location = '/create_subgraph?selected='+JSON.stringify(ids_hash);
    }
  }

  sigma.parsers.json(fullname, {
    container: 'graph-container'
  },
    function(s) {
      // We first need to save the original colors of our
      // nodes and edges, like this:
      s.settings('doubleClickEnabled', false);
      s.graph.nodes().forEach(function(n) {
        n.originalColor = n.color;
      });
      s.graph.edges().forEach(function(e) {
        e.originalColor = e.color;
      });

      // When a node is clicked, we check for each node
      // if it is a neighbor of the clicked one. If not,
      // we set its color as grey, and else, it takes its
      // original color.
      // We do the same for the edges, and we only keep
      // edges that have both extremities colored.
      s.bind('clickNode', function(e) {
        var nodeId = e.data.node.id;
        var nodeInfo = e.data.node.label;
        //console.log('node: ' + nodeInfo);
        neigh = s.graph.neighbors(nodeId);

        var nneigh = Object.keys(neigh['node']).map(function(k) { return neigh['node'][k] });
        var dneigh = Object.keys(neigh['dist']).map(function(k) { return neigh['dist'][k] });

        //toKeep[nodeId] = e.data.node;
        var string = "Info sobre o Nó: \n";
        string += "Nome: "
        string += nodeInfo;
        string += "\nVizinhos:\n"
        var i = 0;
        for (i; i < nneigh.length; i++){
          string += nneigh[i].label;
          string += " - Distância: ";
          string += dneigh[i];
          string += "\n";
        }
        update_node_info(string);
      });

      s.bind('doubleClickNode', function(e) {
        var nodeId = e.data.node.id;
        dc_toggle_selected(nodeId);
      });

      s.bind('overEdge', function(e) {
        var edgeId = e.data.edge.id;
        var nodeDist = e.data.edge.dist;
        //console.log('node: ' + nodeInfo);
        neigh = s.graph.neighbors(nodeId);

      });

    }
  );

  function update_node_info(text){
    $("#nodes-info-text").val(text);
  }

  // Function to get url parameter
  function urlParam(name, w){
      w = w || window;
      var rx = new RegExp('[\&|\?]'+name+'=([^\&\#]+)'),
          val = w.location.search.match(rx);
      return !val ? '':val[1];
  }

  sigma.classes.graph.addMethod('neighbors', function(nodeId) {
    var k;
    var neighbors = {};
    neighbors['node'] = {};
    neighbors['dist'] = {};
    var index = this.allNeighborsIndex[nodeId] || {};

    for (k in index){
      neighbors['node'][k] = this.nodesIndex[k];
      for (z in index[k]){
        neighbors['dist'][k] = index[k][z]['dist'];
      }
    }
    return neighbors;
  });

</script>

<style type="text/css">
  #container {
    background-color: gray;

    position: relative;
    width: 1000px;
    height: 700px;
    left: 10px;
    top: 10px;
    border: 1px solid black;
    border-radius: 3px;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;

    -webkit-flex-flow: row wrap;
    justify-content: space-around;
  }


  #graph-container {
    background-color: white;
    left: 10px;
    top: 10px;
    width: 700px;
    height: 500px;
    position: relative;
    display: inline-block;
    border: 1px solid black;
    border-radius: 3px;
    float: left
  }
  #info-container {
    margin-left: 10px;
    top: 10px;
    width: 270px;
    height: 500px;
    position: relative;
    display: inline-block;
    float: right
  }

  #nodes-list {
    background-color: white;
    width: 260px;
    height: 245px;
    position: relative;
    display: inline-block;
    border: 1px solid black;
    border-radius: 3px;
    margin-bottom: 8px;
  }

  #nodes-info {
    background-color: white;
    width: 260px;
    height: 245px;
    position: relative;
    display: inline-block;
    border: 1px solid black;
    border-radius: 3px;
    overflow: hidden;
  }
  #nodes-info-text{
    height: 230px;
    width: 245px;
    position: relative;
    display: inline-block;
    margin-top: 8px;
    margin-left: 8px;

  }
  #selected-nodes {
    background-color: white;
    margin-right: 12px;
    margin-left: 15px;
    width: 700px;
    height: 150px;
    position: relative;

    -webkit-flex-flow: row wrap;
    justify-content: space-around;
    border: 1px solid black;
    border-radius: 3px;
    overflow: hidden;
    margin-top: 10px;
    float:left;
  }
  #menu-subgraph {
    width: 200px;
    height: 150px;
    position: relative;
    margin-top: 10px;
  }
  #menu-subgraph button {
    margin: 15px;
    position: relative;
  }
  .selected-item {
    height: 15px;
    min-width: 80px;
    overflow: hidden;
    display: inline-block;
    position: relative;
    padding:4px;
    border: 1px solid black;
    border-radius: 2px;
    background-color: lightgray;
    margin-top: 5px;
    margin-left: 5px;
    cursor: pointer;
  }
  .selected-item:hover .hover-delete{
  display : block;
  }
  .hover-delete{
    top:-15px;
    background-color: yellow;
    border: 1px solid black;
    border-radius: 2px;
    position: relative;
    height: 15px;
    width: 50px;
    display: none;
  }

</style>