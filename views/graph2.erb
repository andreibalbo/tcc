<script src="jquery-3.3.1.min.js"></script>

<!-- START SIGMA IMPORTS -->
<script src="sigmajs/src/sigma.core.js"></script>
<script src="sigmajs/src/conrad.js"></script>
<script src="sigmajs/src/utils/sigma.utils.js"></script>
<script src="sigmajs/src/utils/sigma.polyfills.js"></script>
<script src="sigmajs/src/sigma.settings.js"></script>
<script src="sigmajs/src/classes/sigma.classes.dispatcher.js"></script>
<script src="sigmajs/src/classes/sigma.classes.configurable.js"></script>
<script src="sigmajs/src/classes/sigma.classes.graph.js"></script>
<script src="sigmajs/src/classes/sigma.classes.camera.js"></script>
<script src="sigmajs/src/classes/sigma.classes.quad.js"></script>
<script src="sigmajs/src/classes/sigma.classes.edgequad.js"></script>
<script src="sigmajs/src/captors/sigma.captors.mouse.js"></script>
<script src="sigmajs/src/captors/sigma.captors.touch.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.canvas.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.webgl.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.svg.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.nodes.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.nodes.fast.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.fast.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.labels.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.hovers.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.nodes.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.curve.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.curvedArrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.curve.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.curvedArrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.extremities.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.utils.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.nodes.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.edges.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.edges.curve.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.labels.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.hovers.def.js"></script>
<script src="sigmajs/src/middlewares/sigma.middlewares.rescale.js"></script>
<script src="sigmajs/src/middlewares/sigma.middlewares.copy.js"></script>
<script src="sigmajs/src/misc/sigma.misc.animation.js"></script>
<script src="sigmajs/src/misc/sigma.misc.bindEvents.js"></script>
<script src="sigmajs/src/misc/sigma.misc.bindDOMEvents.js"></script>
<script src="sigmajs/src/misc/sigma.misc.drawHovers.js"></script>
<script src="sigmajs/plugins/sigma.parsers.json/sigma.parsers.json.js"></script>
<!-- END SIGMA IMPORTS -->


<title>Sohd Rotas</title>
</head>
<body style="margin:0px;">
  <div id="headbar">
    <div class="title-wrapper">
      <h2>Sohd Rotas - Subgrafo</h2>
    </div>
  </div>

   <div id="container">
    <div id="left-container">
      <div id="graph-container">
      </div>
    </div>
    <div id="middle-container">
    </div>
    <div id="right-container">
      <div id="info-container">
        <div id="nodes-list">
          <div>
            <h3>Cálculo de centros de distribuição</h3>
            <p>Número de centros para cálculo</p>
            <div class="tb-form">
              <input type="number" id="tb-centers">
              <button class="button-default" onclick="calculateTB()" style="margin: 0px 30px;">Teitz & Bart</button>
            </div>
            <hr>
            <h3>Cálculo de rotas</h3>
            <input type="checkbox" id="show-each-centers-path" value="Bike">Mostrar melhor rota para cada centro<br>
              <button class="button-default" onclick="centersPath()" <%="disabled" if centers.nil? || centers.size < 3 %>>Calcular melhor rota entre centros</button><br>
            <hr>
            <h3>Selecionar nós para cálculo de rota</h3>
            <div id="selected-wrapper">
              <p>Nós Selecionados:</p>
              <div id="selected-nodes">
              </div>
            </div>
              <button class="button-default" id="custom-path-button" onclick="customPath()" disabled style="font-size: 12px;">Calcular rota customizada</button><br>
          </div>
        </div>
        <div id="nodes-info">
          <textarea id="nodes-info-text"> Informação sobre nós: </textarea>
        </div>
        <div style="display: none;">
          <input type="text" id="centers-array" value=<%= centers.to_s %>>
        </div>
        <div id="menu-subgraph">
          <button class="button-default" id="button-csv" onclick="exportToCSV()" disabled="disabled">Exportar para CSV</button>
          <button class="button-default" id="button-txt" onclick="exportToTXT()" disabled="disabled">Exportar para TXT</button>
        </div>
      </div>

    </div>


    </div>

  <div id="footer">
    <div class="footer-wrapper">
      <p>Trabalho de Conclusão de Curso - Andrei Balbo e Vanessa Wrezinski</p>
    </div>
  </div>

</body>

<script>
/**
 * Here is just a basic example on how to properly display a graph
 * exported from Gephi as a JSON file, with the JSON Exporter plugin from
 * the Oxford Internet Institute:
 *
 *  > https://marketplace.gephi.org/plugin/json-exporter/
 *
 * The plugin sigma.parsers.json can load and parse the JSON graph file,
 * and instantiate sigma when the graph is received.
 *
 * The object given as the second parameter is the base of the instance
 * configuration object. The plugin will just add the "graph" key to it
 * before the instanciation.
 */
  window.onload = function(){
    if (centers.length > 0){
      $('#button-csv').prop('disabled', false);
      $('#button-txt').prop('disabled', false);
    }
  };

  var fullname = "uploads/subgraph.json";

  calculateTB = function() {
  var ncenters = $('#tb-centers').val();
    if (ncenters == "" || ncenters < 1) {
      window.location = '/graph2';
    }
    else {
      window.location = '/graph2?nc=' + ncenters;
    }
  }

  exportToCSV = function(){
    var url = '/download?type=csv';
    $.get(url, function() {
    });
    alert('Arquivo salvo em /public/export/download.csv');
  }

  exportToTXT = function(){
    var url = '/download?type=txt';
    $.get(url, function() {
    });
  }

  var centers = [];
  <% if centers.size > 0 %>
    centers = <%= centers.inspect %>
  <% end %>
  var proximity_hash;
  var json_prox;
  <% if prox_hash.size > 0 %>
    json_prox = <%= prox_hash.inspect %>
    proximity_hash = JSON.parse( json_prox );
  <% end %>

  var instance_nodes = [];
  var instance_edges = [];


  centersPath = function() {
    clearAllSelected();
    var path = centers;
    var path_array = [];
    path.push(path[0]);
    var url = '/centers_path?centers=' + JSON.stringify(path);
    $.get(url, function(data) {
      path_hash = JSON.parse(data);
      colorCentersPath(path_hash);
    });
  };

  colorCentersPath = function(path_hash) {
    clearAllSelected();
    var path_array = path_hash['path'];
    var total_dist = path_hash['dist'];
    var path_info_string = "Rota entre centros - \n";
    path_array.forEach(function(p, i){
      if (i != (path_array.length-1)){
        if (centers.includes(p)){
          path_info_string += instance_nodes[p].label +' > ';
        }else {
          path_info_string += instance_nodes[p].label +' > ';
        }
        var pindex = i;
        var pnext = path_array[i+1];
        instance_edges.forEach(function(e){
          if ((e.source == p && e.target == pnext) || ((e.target == p && e.source == pnext))){
            e.color = '#3333ff';
          }
        });
      } else { path_info_string += instance_nodes[p].label; }
    });
    path_info_string += "\nDistância total da rota: "+ total_dist;
    update_node_info(path_info_string);
    var s = sigma.instances(0);
    s.refresh();
  }

  deleteSelected = function(element) {
    var removed_id = parseInt(element.parentElement.name);
    $("#select-nodes-add option[value=" + removed_id + "]").removeAttr('disabled');
    var s = sigma.instances()[0];
    s.graph.nodes()[removed_id].color = '#000';
    $(element).parent().remove();
    var ids = $(".selected-item").map(function() {
      return this.name;
    }).get();
    ids.forEach(function(id) {
      s.graph.nodes()[id].color = '#0f0'
    });
    s.refresh();
    if ($(".selected-item").length > 1) { $("#custom-path-button").removeAttr('disabled');
    } else { $("#custom-path-button").attr('disabled', 'disabled'); }
  }

  clearAllSelected = function() {
    $(".selected-item").remove();
    resetNodesColor();
  }

  dc_toggle_selected = function(id){
    var toggle_id = id;
    var s = sigma.instances()[0];
    //check if is selected
    if ($(".selected-item[name="+id+"]").length > 0){
      $("#select-nodes-add option[value=" + toggle_id + "]").removeAttr('disabled');
      $(".selected-item[name="+id+"]").remove();
      if ($(".selected-item").length > 1) { $("#custom-path-button").removeAttr('disabled');
      } else { $("#custom-path-button").attr('disabled', 'disabled'); }
      var ids = $(".selected-item").map(function() {
        return this.name;
      }).get();
      ids.forEach(function(id) {
        s.graph.nodes()[id].color = '#0f0'
      });
      s.refresh();
    }
    else {
      $("#select-nodes-add option[value=" + toggle_id + "]").attr('disabled', 'disabled');
      var toggle_label = s.graph.nodes()[toggle_id].label;
      $( "#selected-nodes" ).append("<a class='selected-item' name='"+toggle_id+"'>"+toggle_label+"<div class='hover-delete' onclick='deleteSelected(this)'>Remover</div></a>" );
      $('#select-nodes-add').prop('selectedIndex',0);

      if ($(".selected-item").length > 1) { $("#custom-path-button").removeAttr('disabled');
      } else { $("#custom-path-button").attr('disabled', 'disabled'); }

      var ids = $(".selected-item").map(function() {
        return this.name;
      }).get();
      ids.forEach(function(id) {
        s.graph.nodes()[id].color = '#0f0'
      });
      s.graph.nodes()[toggle_id].color = '#0f0'
      s.graph.edges().forEach(function(e){
        e.color = '#000';
      });

    s.refresh();
    }
  };

  sigma.parsers.json(fullname, {
    container: 'graph-container',
    type: 'canvas'
  },
    function(s) {

      s.settings('doubleClickEnabled', false);

      s.graph.nodes().forEach(function(n) {
        instance_nodes[n.id] = n;
      });
      s.graph.edges().forEach(function(e) {
        instance_edges[e.id] = e;
      });

      // First, set all nodes and edges to black
      s.graph.nodes().forEach(function(n) {
        var needRefresh = false;
        if (n.color != '#000') {
          needRefresh = true
        }
        n.color = '#000'
        if (needRefresh) {
          s.refresh();
        }
      });
      s.graph.edges().forEach(function(e) {
        var needRefresh = false;
        if (e.color != '#000') {
          needRefresh = true
        }
        e.color = '#000'
        if (needRefresh) {
          s.refresh();
        }
      });
      // Then check if some of them are centers
      s.graph.nodes().forEach(function(n) {
        var needRefresh = false;
        if (centers.includes(n.id)) {
          if (n.color != '#f00') {
            needRefresh = true;
          }
          n.color = '#f00';
          n.size = 2;
        }
        if (needRefresh) {
          s.refresh();
        }
      });

      // When a node is clicked, get its information and display
      // If it is a center node, we need to get nodes related to
      // that center and highlight them

      s.bind('clickNode', function(e) {
        //reset all nodes and edges color
        resetNodesColor();
        resetEdgesColor();
        var nodeId = e.data.node.id;
        var nodeInfo = e.data.node.label;
        neigh = s.graph.neighbors(nodeId);

        var nneigh = Object.keys(neigh['node']).map(function(k) { return neigh['node'][k] });
        var dneigh = Object.keys(neigh['dist']).map(function(k) { return neigh['dist'][k] });

        var string = "Info sobre o Nó: \n";
        string += "Nome: "
        string += nodeInfo;
        string += "\nVizinhos:\n"
        var i = 0;
        for (i; i < nneigh.length; i++){
          string += nneigh[i].label;
          string += " - Distância: ";
          string += dneigh[i];
          string += "\n";
        }
        update_node_info(string);

        node = e.data.node
        if (centers.includes(node.id)) {
          clearAllSelected();
          s.graph.nodes().forEach(function(n) {
            if (proximity_hash[node.id].includes(n.id)){
              if (n.id != node.id) {n.color = '#ff9900';}
            }
            else {
              if (!centers.includes(n.id)) {n.color = '#000';}
            }
          });
          if (document.getElementById("show-each-centers-path").checked){
            getBestNodesPath(proximity_hash[node.id], node.id);
          }

          s.refresh();
        }

      });

      s.bind('doubleClickNode', function(e) {
        var nodeId = e.data.node.id;
        dc_toggle_selected(nodeId);
      });

      s.bind('overEdge', function(e) {
        console.log('edge: ' + e);
      });

    }
  );

  resetNodesColor = function() {
    var s = sigma.instances(0);
    s.graph.nodes().forEach(function(n) {
      if (!centers.includes(n.id)){
        n.color = '#000';
      }
    });
  }

  resetEdgesColor = function() {
    var s = sigma.instances(0);
    s.graph.edges().forEach(function(e) {
      e.color = '#000';
    });
  }

  getBestNodesPath = function(array, center) {
    var path = array;
    var path_array = [];
    var i = 0;
    while (path[0] != center){
      path = path.concat(path.splice(0,1));
    }
    path.push(path[0]);
    var url = '/best_path?arr=' + JSON.stringify(path);
    $.get(url, function(data) {
      path_hash = JSON.parse(data);
      colorBestPath(path_has, 1);
    });
  }

  customPath = function() {
    var ids = $(".selected-item").map(function() {
      return this.name;
    }).get();
    var path = ids;
    path.push(path[0]);
    var url = '/best_path?arr=' + JSON.stringify(path);
    $.get(url, function(data) {
      path_hash = JSON.parse(data);
      colorBestPath(path_hash, 0);
    });
  }

  colorBestPath = function(path_hash, bool) {
    var path_array = path_hash['path'];
    var total_dist = path_hash['dist'];

    resetEdgesColor();
    var s = sigma.instances(0);
    var center = path_array[0];
    if (bool == 0){
      var path_info_string = "Rota customizada: \n";
    }
    else {
      var path_info_string = "Rota das cidades do centro: " + instance_nodes[center].label +" \n";
    }

    path_info_string += "Melhor rota:\n"
    path_array.forEach(function(p, i){
      if (i != (path_array.length-1)){
        path_info_string += instance_nodes[p].label +" > ";
        var pindex = i;
        var pnext = path_array[i+1];
        instance_edges.forEach(function(e){
          if ((e.source == p && e.target == pnext) || ((e.target == p && e.source == pnext))){
            e.color = '#3333ff';
          }
        });
      } else { path_info_string += instance_nodes[p].label }
    });
    path_info_string += "\nDistância total da rota: "+ total_dist;
    update_node_info(path_info_string);

    if (bool == 0){
      var ids = $(".selected-item").map(function() {
        return this.name;
      }).get();
      ids.forEach(function(id) {
        s.graph.nodes()[id].color = '#0f0'
      });
    }

    s.refresh();
  }

  function update_node_info(text){
    $("#nodes-info-text").val(text);
  }

  // Function to get url parameter
  function urlParam(name, w){
      w = w || window;
      var rx = new RegExp('[\&|\?]'+name+'=([^\&\#]+)'),
          val = w.location.search.match(rx);
      return !val ? '':val[1];
  }

  sigma.classes.graph.addMethod('neighbors', function(nodeId) {
    var k;
    var neighbors = {};
    neighbors['node'] = {};
    neighbors['dist'] = {};
    var index = this.allNeighborsIndex[nodeId] || {};

    for (k in index){
      neighbors['node'][k] = this.nodesIndex[k];
      for (z in index[k]){
        neighbors['dist'][k] = index[k][z]['dist'];
      }
    }
    return neighbors;
  });

</script>

<style type="text/css">
  #graph-container {
    background-color: #fff;
    width: 90%;
    height: 98%;
    position: relative;
    display: inline-block;
    border-radius: 3px;
    border: 1px solid #ddd;
  }

  #info-container {
    width: 95%;
    position: relative;
    display: inline-block;
  }

  #info-container h3{
    margin: 3px;
  }
  #nodes-list {
    background-color: white;
    width: 95%;
    height: 57%;
    position: relative;
    display: inline-block;
    border: 1px solid #ddd;
    border-radius: 3px;
    margin-bottom: 8px;
    font-size: 13px;
  }

  #nodes-list hr{
    color: #ddd;
    border-color: #ddd;
  }

  #tb-centers {
    max-width: 60px;
  }
  .tb-form {
    display: table;
    vertical-align: middle;
    text-align: center;
    width: 100%;
    height: 30px;
  }

  #nodes-list p {
    font-size: 15px;
  }
  #nodes-list button {
    margin-top: 15px;
    padding: 3px;
  }

  #nodes-info {
    background-color: white;
    width: 95%;
    height: 25%;
    position: relative;
    display: inline-block;
    border: 1px solid #ddd;
    border-radius: 3px;
    overflow: hidden;
    margin-top: 15px;
  }
  #nodes-info-text{
    height: 95%;
    width: 95%;
    position: relative;
    display: inline-block;
    margin-top: 8px;
  }
  #selected-wrapper {
    background-color: white;
    position: relative;
    display: inline-block;
    margin-top: 15px;
    width: 90%;
    height: 25%;
    text-align: left;
    border: 1px solid #ddd;
    border-radius: 3px;
  }
  #selected-wrapper p{
    margin: 5px;
    font-size: 12px;
  }
  #selected-nodes {
    width: 100%;
    height: 77%;
    text-align: left;
    overflow-y: scroll;
  }
  #menu-subgraph {
    width: 95%;
    height: 10%;
    position: relative;
    margin-top: 15px;
    display: inline-block;
    text-align: center;
    border: 1px solid #ddd;
    border-radius: 3px;
  }

  .selected-item {
    height: 15px;
    min-width: 60px;
    overflow: hidden;
    display: inline-block;
    position: relative;
    padding: 2px;
    color: #ffffff;
    border: 1px solid #ffffff;
    border-radius: 2px;
    background-color: #0099ff;
    margin-top: 5px;
    margin-left: 5px;
    cursor: pointer;
    text-align: center;
  }
  .selected-item:hover .hover-delete{
    display : block;
  }
  .hover-delete{
    top:-18px;
    background-color: yellow;
    border: 1px solid black;
    border-radius: 2px;
    position: relative;
    display: none;
    color: #000;
  }

  .sigma-scene, .sigma-labels, .sigma-mouse {
      left: 0;
  }

  #headbar {
    position: relative;
    height: 10vh;
    width: 100%;
    background-color: #0099ff;
  }
  .title-wrapper {
    position: relative;
    float: left;
    height: 100%;
    width: 100%;
    display: table;
    text-align: left;
  }
  .title-wrapper h2{
    padding-left: 50px;
    font-family: 'Verdana';
    margin: 0px;
    color: #ffffff;
    font-size: 45px;
    display: table-cell;
    vertical-align: middle;
  }

  #container {
    position: relative;
    height: 80vh;
    width: 100%;
    display: table;
    text-align: center;
    vertical-align: middle;
    font-family: 'Verdana';
  }

  #left-container {
    padding: 1.5% 0px;
    height: 100%;
    position: relative;
    display: inline-block;
    width: 65%;
    float: left;
  }
  #middle-container {
    display: inline-block;
    width: 2%;
    height: 90%;
    margin: 2.5% 0%;
    float: left;
    border-left: 2px solid #dddddd;
  }
  #right-container {
    height: 100%;
    position: relative;
    display: inline-block;
    width: 28%;
    float: left;
    padding: 15px 0px;
  }

  .button-default {
    margin-top: 15px;
    background: #0099ff;
    color: #ffffff;
    text-align: center;
    vertical-align: middle;
    padding: 10px 10px;
    font-size: 15px;
    max-width: 200px;
    border-radius: 3px;
    border: 1px solid #ffffff;
    font-family: 'Verdana';
    text-decoration: none;
  }

  .button-default:disabled{
    border: 1px solid #eee;
    background-color: #eee;
    color: #fff;
    cursor: default;
  }

  .button-default[disabled]:hover {
    background: #eee;
    color: #fff;
    border: 1px solid #eee;
  }

  .button-default:hover {
    background: #ffffff;
    color: #0099ff;
    border: 1px solid #0099ff;
  }

  #footer {
    position: relative;
    height: 10vh;
    width: 100%;
    background-color: #0099ff;
    display: inline-block;
  }

  .footer-wrapper {
    width: 100%;
    height: 100%;
    position: relative;
    display: table;
    text-align: center;
  }

  .footer-wrapper p {
    font-family: 'Verdana';
    margin: 0px;
    color: #ffffff;
    display: table-cell;
    vertical-align: middle;
  }
</style>