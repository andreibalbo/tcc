<script src="jquery-3.3.1.min.js"></script>

<!-- START SIGMA IMPORTS -->
<script src="sigmajs/src/sigma.core.js"></script>
<script src="sigmajs/src/conrad.js"></script>
<script src="sigmajs/src/utils/sigma.utils.js"></script>
<script src="sigmajs/src/utils/sigma.polyfills.js"></script>
<script src="sigmajs/src/sigma.settings.js"></script>
<script src="sigmajs/src/classes/sigma.classes.dispatcher.js"></script>
<script src="sigmajs/src/classes/sigma.classes.configurable.js"></script>
<script src="sigmajs/src/classes/sigma.classes.graph.js"></script>
<script src="sigmajs/src/classes/sigma.classes.camera.js"></script>
<script src="sigmajs/src/classes/sigma.classes.quad.js"></script>
<script src="sigmajs/src/classes/sigma.classes.edgequad.js"></script>
<script src="sigmajs/src/captors/sigma.captors.mouse.js"></script>
<script src="sigmajs/src/captors/sigma.captors.touch.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.canvas.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.webgl.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.svg.js"></script>
<script src="sigmajs/src/renderers/sigma.renderers.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.nodes.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.nodes.fast.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.def.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.fast.js"></script>
<script src="sigmajs/src/renderers/webgl/sigma.webgl.edges.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.labels.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.hovers.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.nodes.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.curve.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edges.curvedArrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.def.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.curve.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.arrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.edgehovers.curvedArrow.js"></script>
<script src="sigmajs/src/renderers/canvas/sigma.canvas.extremities.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.utils.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.nodes.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.edges.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.edges.curve.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.labels.def.js"></script>
<script src="sigmajs/src/renderers/svg/sigma.svg.hovers.def.js"></script>
<script src="sigmajs/src/middlewares/sigma.middlewares.rescale.js"></script>
<script src="sigmajs/src/middlewares/sigma.middlewares.copy.js"></script>
<script src="sigmajs/src/misc/sigma.misc.animation.js"></script>
<script src="sigmajs/src/misc/sigma.misc.bindEvents.js"></script>
<script src="sigmajs/src/misc/sigma.misc.bindDOMEvents.js"></script>
<script src="sigmajs/src/misc/sigma.misc.drawHovers.js"></script>
<script src="sigmajs/plugins/sigma.parsers.json/sigma.parsers.json.js"></script>
<!-- END SIGMA IMPORTS -->

<head>
  <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
  <title>App</title>
</head>

<body>

  <div id="container">

      <div id="graph-container">
      </div>
      <div id="info-container">
        <div id="algorithm-pane">
          <div>
            <p>Número de centros para cálculo</p>
            <input type="number" id="tb-centers"><br>
            <button onclick="calculateTB()">Teitz & Bart</button><br>
            <input type="checkbox" id="show-each-centers-path" value="Bike">Mostrar melhor rota para cada centro<br>
            <hr>
            <% unless centers.nil? || centers.size < 3 %>
              <p>Calcular melhor rota entre centros começando por:</p>
              <select id="select-starting-center">
                <% centers.each do |c|%>
                  <option value= <%= nodes[c]['id'].to_s %> > <%= nodes[c]['label'] %></option>
                <% end %>
              </select>
              <button onclick="centersPath()">Melhor rota entre centros</button><br>
            <% end %>
          </div>
        </div>
        <div id="nodes-info">
          <textarea id="nodes-info-text"> Nodes Info </textarea>
        </div>
        <div style="display: none;">
          <input type="text" id="centers-array" value=<%= centers.to_s %>>
        </div>
      </div>

  </div>

</body>

<script>
/**
 * Here is just a basic example on how to properly display a graph
 * exported from Gephi as a JSON file, with the JSON Exporter plugin from
 * the Oxford Internet Institute:
 *
 *  > https://marketplace.gephi.org/plugin/json-exporter/
 *
 * The plugin sigma.parsers.json can load and parse the JSON graph file,
 * and instantiate sigma when the graph is received.
 *
 * The object given as the second parameter is the base of the instance
 * configuration object. The plugin will just add the "graph" key to it
 * before the instanciation.
 */

  var fullname = "uploads/subgraph.json";

  calculateTB = function() {
  var ncenters = $('#tb-centers').val();
    if (ncenters == "" || ncenters < 1) {
      window.location = '/graph2';
    }
    else {
      window.location = '/graph2?nc=' + ncenters;
    }
  }

  var centers = [];
  <% if centers.size > 0 %>
    centers = <%= centers.inspect %>
  <% end %>
  var proximity_hash;
  var json_prox;
  <% if prox_hash.size > 0 %>
    json_prox = <%= prox_hash.inspect %>
    proximity_hash = JSON.parse( json_prox );
  <% end %>

  var instance_nodes = [];
  var instance_edges = [];


  centersPath = function() {
    var path = centers;
    var path_array = [];
    path.push(path[0]);
    var url = '/centers_path?centers=' + JSON.stringify(path);
    $.get(url, function(data) {
      path_hash = JSON.parse(data);
      colorCentersPath(path_hash);
    });
  };

  colorCentersPath = function(array) {
    var path_array = path_hash['hash'];
    var total_dist = path_hash['dist'];
    var path_info_string = "Rota entre centros - \n";
    path_array.forEach(function(p, i){
      if (i != (path_array.length-1)){
        if (centers.includes(p)){
          path_info_string += instance_nodes[p].label +' > ';
        }else {
          path_info_string += instance_nodes[p].label +' > ';
        }
        var pindex = i;
        var pnext = path_array[i+1];
        instance_edges.forEach(function(e){
          if ((e.source == p && e.target == pnext) || ((e.target == p && e.source == pnext))){
            e.color = '#3333ff';
          }
        });
      } else { path_info_string += instance_nodes[p].label; }
    });
    path_info_string += "\nDistância total da rota: "+ total_dist;
    update_node_info(path_info_string);
    var s = sigma.instances(0);
    s.refresh();
  }


  sigma.parsers.json(fullname, {
    container: 'graph-container',
    type: 'canvas'
  },
    function(s) {

      s.graph.nodes().forEach(function(n) {
        instance_nodes[n.id] = n;
      });
      s.graph.edges().forEach(function(e) {
        instance_edges[e.id] = e;
      });

      // First, set all nodes and edges to black
      s.graph.nodes().forEach(function(n) {
        var needRefresh = false;
        if (n.color != '#000') {
          needRefresh = true
        }
        n.color = '#000'
        if (needRefresh) {
          s.refresh();
        }
      });
      s.graph.edges().forEach(function(e) {
        var needRefresh = false;
        if (e.color != '#000') {
          needRefresh = true
        }
        e.color = '#000'
        if (needRefresh) {
          s.refresh();
        }
      });
      // Then check if some of them are centers
      s.graph.nodes().forEach(function(n) {
        var needRefresh = false;
        if (centers.includes(n.id)) {
          if (n.color != '#f00') {
            needRefresh = true;
          }
          n.color = '#f00';
          n.size = 2;
        }
        if (needRefresh) {
          s.refresh();
        }
      });

      // When a node is clicked, get its information and display
      // If it is a center node, we need to get nodes related to
      // that center and highlight them

      s.bind('clickNode', function(e) {
        //reset all nodes and edges color
        resetNodesColor();
        resetEdgesColor();
        var nodeId = e.data.node.id;
        var nodeInfo = e.data.node.label;
        neigh = s.graph.neighbors(nodeId);

        var nneigh = Object.keys(neigh['node']).map(function(k) { return neigh['node'][k] });
        var dneigh = Object.keys(neigh['dist']).map(function(k) { return neigh['dist'][k] });

        var string = "Info sobre o Nó: \n";
        string += "Nome: "
        string += nodeInfo;
        string += "\nVizinhos:\n"
        var i = 0;
        for (i; i < nneigh.length; i++){
          string += nneigh[i].label;
          string += " - Distância: ";
          string += dneigh[i];
          string += "\n";
        }
        update_node_info(string);

        node = e.data.node
        if (centers.includes(node.id)) {
          s.graph.nodes().forEach(function(n) {
            if (proximity_hash[node.id].includes(n.id)){
              if (n.id != node.id) {n.color = '#ff9900';}
            }
            else {
              if (!centers.includes(n.id)) {n.color = '#000';}
            }
          });
          if (document.getElementById("show-each-centers-path").checked){
            getBestNodesPath(proximity_hash[node.id], node.id);
          }

          s.refresh();
        }

      });

      s.bind('overEdge', function(e) {
        console.log('edge: ' + e);
      });

    }
  );

  resetNodesColor = function() {
    var s = sigma.instances(0);
    s.graph.nodes().forEach(function(n) {
      if (!centers.includes(n.id)){
        n.color = '#000';
      }
    });
  }

  resetEdgesColor = function() {
    var s = sigma.instances(0);
    s.graph.edges().forEach(function(e) {
      e.color = '#000';
    });
  }

  getBestNodesPath = function(array, center) {
    var path = array;
    var path_array = [];
    var i = 0;
    while (path[0] != center){
      path = path.concat(path.splice(0,1));
    }
    path.push(path[0]);
    var url = '/best_path?arr=' + JSON.stringify(path);
    $.get(url, function(data) {
      path_hash = JSON.parse(data);
      colorBestPath(path_hash);
    });
  }

  colorBestPath = function(path_hash) {
    var path_array = path_hash['path'];
    var total_dist = path_hash['dist'];

    resetEdgesColor();
    var s = sigma.instances(0);
    var path_info_string = "Rota das cidades do centro: -" + instance_nodes[path_array[0]].label +" \n";

    path_info_string += "Melhor rota:\n"
    path_array.forEach(function(p, i){
      if (i != (path_array.length-1)){
        path_info_string += instance_nodes[p].label +" > ";
        var pindex = i;
        var pnext = path_array[i+1];
        instance_edges.forEach(function(e){
          if ((e.source == p && e.target == pnext) || ((e.target == p && e.source == pnext))){
            e.color = '#3333ff';
          }
        });
      } else { path_info_string += instance_nodes[p].label }
    });
    path_info_string += "\nDistância total da rota: "+ total_dist;
    update_node_info(path_info_string);
    s.refresh();
  }

  function update_node_info(text){
    $("#nodes-info-text").val(text);
  }

  // Function to get url parameter
  function urlParam(name, w){
      w = w || window;
      var rx = new RegExp('[\&|\?]'+name+'=([^\&\#]+)'),
          val = w.location.search.match(rx);
      return !val ? '':val[1];
  }

  sigma.classes.graph.addMethod('neighbors', function(nodeId) {
    var k;
    var neighbors = {};
    neighbors['node'] = {};
    neighbors['dist'] = {};
    var index = this.allNeighborsIndex[nodeId] || {};

    for (k in index){
      neighbors['node'][k] = this.nodesIndex[k];
      for (z in index[k]){
        neighbors['dist'][k] = index[k][z]['dist'];
      }
    }
    return neighbors;
  });

</script>

<style type="text/css">
  #container {
    background-color: gray;

    position: relative;
    width: 1000px;
    height: 700px;
    left: 10px;
    top: 10px;
    border: 1px solid black;
    border-radius: 3px;
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;

    -webkit-flex-flow: row wrap;
    justify-content: space-around;
  }


  #graph-container {
    background-color: white;
    left: 10px;
    top: 10px;
    width: 700px;
    height: 677px;
    position: relative;
    display: inline-block;
    border: 1px solid black;
    border-radius: 3px;
    float: left
  }
  #info-container {
    margin-left: 10px;
    top: 10px;
    width: 270px;
    height: 500px;
    position: relative;
    display: inline-block;
    float: right
  }

  #algorithm-pane {
    background-color: white;
    width: 260px;
    height: 422px;
    position: relative;
    display: inline-block;
    border: 1px solid black;
    border-radius: 3px;
    margin-bottom: 8px;
  }

  #algorithm-pane div {
    padding: 10px;
  }

  #nodes-info {
    background-color: white;
    width: 260px;
    height: 245px;
    position: relative;
    display: inline-block;
    border: 1px solid black;
    border-radius: 3px;
    overflow: hidden;
  }
  #nodes-info-text{
    height: 230px;
    width: 245px;
    position: relative;
    display: inline-block;
    margin-top: 8px;
    margin-left: 8px;

  }
  #selected-nodes {
    background-color: white;
    margin-right: 12px;
    margin-left: 15px;
    width: 100%;
    height: 150px;
    position: relative;

    -webkit-flex-flow: row wrap;
    justify-content: space-around;
    border: 1px solid black;
    border-radius: 3px;
    overflow: hidden;
    margin-top: 10px;
    float:left;
  }
  #selected-item {
    height: 15px;
    min-width: 80px;
    overflow: hidden;
    display: inline-block;
    position: relative;
    padding:4px;
    border: 1px solid black;
    border-radius: 2px;
    background-color: lightgray;
    margin-top: 5px;
    margin-left: 5px;
    cursor: pointer;
  }
  #selected-item:hover .hover-delete{
  display : block;
  }
  .hover-delete{
    top:-15px;
    background-color: yellow;
    border: 1px solid black;
    border-radius: 2px;
    position: relative;
    height: 15px;
    width: 50px;
    display: none;
  }

</style>